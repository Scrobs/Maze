// src/app.js - ƒåESK√Å VERZE

import { algorithms } from './algorithms/index.js';
import { renderMaze } from './render/canvas.js';
import { saveMazeAsJSON } from './export/json.js';
import { saveMazeAsSVG } from './export/svg.js';
import { ensureSinglePath } from './utils/mazeUtils.js';
import { analyzeDistribution, balanceDistribution } from './utils/distributionUtils.js';

// --- DOM Elementy ---
const form             = document.getElementById('maze-config');
const widthInput       = document.getElementById('maze-width');
const heightInput      = document.getElementById('maze-height');
const algoSelect       = document.getElementById('algorithm');
const singlePathChk    = document.getElementById('single-path');
const balanceChk       = document.getElementById('balance-dist');
const balanceOpts      = document.getElementById('balance-options');
const deadInput        = document.getElementById('dead-end-ratio');
const threeInput       = document.getElementById('three-way-ratio');
const straightInput    = document.getElementById('straight-ratio');
const generateBtn      = document.getElementById('generate-btn');
const clearBtn         = document.getElementById('clear-btn');
const saveBtn          = document.getElementById('save-btn');
const saveSvgBtn       = document.getElementById('save-svg-btn');
const printWorksheetBtn = document.getElementById('print-worksheet-btn');
const canvas           = document.getElementById('maze-canvas');
const errorMessage     = document.getElementById('error-message');
const algorithmOptions = document.getElementById('algorithm-options');

// Algoritmy, kter√© mohou produkovat smyƒçky
const LOOP_ALGOS = new Set(['braided', 'sparse-loop', 'multi-layer']);

// --- Stav aplikace ---
let currentMaze    = null;
let isGenerating   = false;

// --- Nastaven√≠ pl√°tna ---
function setupCanvas() {
  const dpr  = window.devicePixelRatio || 1;
  const size = 600;
  canvas.style.width  = `${size}px`;
  canvas.style.height = `${size}px`;
  canvas.width  = size * dpr;
  canvas.height = size * dpr;

  const ctx = canvas.getContext('2d');
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.scale(dpr, dpr);
}

// --- Roz≈°√≠≈ôen√° validace formul√°≈ôe ---
function validateDistributionRatios(deadEnds, threeWay, straight) {
  // Validace jednotliv√Ωch hodnot
  if (isNaN(deadEnds) || deadEnds < 0 || deadEnds > 1) {
    throw new Error('Pomƒõr mrtv√Ωch konc≈Ø mus√≠ b√Ωt mezi 0 a 1');
  }
  if (isNaN(threeWay) || threeWay < 0 || threeWay > 1) {
    throw new Error('Pomƒõr trojcestn√Ωch k≈ôi≈æovatek mus√≠ b√Ωt mezi 0 a 1');
  }
  if (isNaN(straight) || straight < 0 || straight > 1) {
    throw new Error('Pomƒõr rovn√Ωch chodeb mus√≠ b√Ωt mezi 0 a 1');
  }

  const sum = deadEnds + threeWay + straight;
  
  // Kontrola, zda nejsou v≈°echny nuly
  if (sum === 0) {
    throw new Error('Alespo≈à jeden pomƒõr distribuce mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0');
  }
  
  // Kontrola, zda souƒçet je p≈ôibli≈ænƒõ 1.0
  if (Math.abs(sum - 1.0) > 0.05) {
    throw new Error(`Pomƒõry distribuce se sƒç√≠taj√≠ na ${sum.toFixed(2)}, ale mƒõly by se sƒç√≠tat p≈ôibli≈ænƒõ na 1,0`);
  }
  
  return {
    deadEnds: deadEnds / sum,   // Normalizace pro mal√© zaokrouhlovac√≠ chyby
    threeWay: threeWay / sum,
    straight: straight / sum
  };
}

// --- Pomocn√© funkce ---
function getFormConfig() {
  const config = {
    width: parseInt(widthInput.value, 10),
    height: parseInt(heightInput.value, 10),
    algorithm: algoSelect.value,
    singlePath: singlePathChk.checked,
    balanceDist: balanceChk.checked
  };

  // Validace rozmƒõr≈Ø
  if (isNaN(config.width) || config.width < 2 || config.width > 100) {
    throw new Error('≈†√≠≈ôka mus√≠ b√Ωt mezi 2 a 100');
  }
  if (isNaN(config.height) || config.height < 2 || config.height > 100) {
    throw new Error('V√Ω≈°ka mus√≠ b√Ωt mezi 2 a 100');
  }

  // Specifick√© mo≈ænosti algoritm≈Ø
  const optsGroup = algorithmOptions.querySelector(
    `.option-group[data-algorithm="${config.algorithm}"]`
  );
  if (optsGroup) {
    config.options = {};
    optsGroup.querySelectorAll('input[type="number"]').forEach(input => {
      const v = parseFloat(input.value);
      if (!isNaN(v)) {
        config.options[input.name] = v;
      }
    });
  }

  // Mo≈ænosti vyva≈æov√°n√≠ distribuce - VYLEP≈†EN√Å VALIDACE
  if (config.balanceDist) {
    const deadEnds = parseFloat(deadInput.value);
    const threeWay = parseFloat(threeInput.value);
    const straight = parseFloat(straightInput.value);
    
    try {
      config.distribution = validateDistributionRatios(deadEnds, threeWay, straight);
    } catch (error) {
      throw new Error(`Validace distribuce selhala: ${error.message}`);
    }
  }

  return config;
}

function showError(msg) {
  errorMessage.textContent = msg;
  errorMessage.classList.add('show');
  setTimeout(() => errorMessage.classList.remove('show'), 8000); // Del≈°√≠ zobrazen√≠ pro slo≈æit√© chyby
}

function setGenerating(flag) {
  isGenerating = flag;
  generateBtn.disabled = flag;
  generateBtn.textContent = flag ? 'Generuji...' : 'Generovat';
}

// --- Zpracov√°n√≠ mo≈ænost√≠ algoritm≈Ø ---
function updateAlgorithmOptions() {
  const sel = algoSelect.value;
  algorithmOptions.querySelectorAll('.option-group')
    .forEach(g => g.classList.remove('active'));
  const active = algorithmOptions.querySelector(
    `.option-group[data-algorithm="${sel}"]`
  );
  if (active) active.classList.add('active');
}

// --- Hlavn√≠ akce UI ---
async function handleGenerate(e) {
  if (e) e.preventDefault?.();
  if (isGenerating) return;

  try {
    setGenerating(true);
    const config = getFormConfig();

    if (!algorithms[config.algorithm]) {
      throw new Error(`Algoritmus "${config.algorithm}" nen√≠ dostupn√Ω.`);
    }

    // Umo≈ænit aktualizaci UI
    await new Promise(r => requestAnimationFrame(r));

    // Generovat z√°kladn√≠ bludi≈°tƒõ
    console.log(`Generuji ${config.width}x${config.height} bludi≈°tƒõ pomoc√≠ ${config.algorithm}`);
    currentMaze = config.options
      ? algorithms[config.algorithm](config.width, config.height, config.options)
      : algorithms[config.algorithm](config.width, config.height);

    if (!currentMaze || !currentMaze.isValid()) {
      throw new Error('Vygenerovan√© bludi≈°tƒõ je neplatn√© nebo po≈°kozen√©.');
    }

    console.log('Z√°kladn√≠ bludi≈°tƒõ √∫spƒõ≈°nƒõ vygenerov√°no');

    // OPRAVEN√â PO≈òAD√ç: Vyv√°≈æen√≠ distribuce P≈òED vynucen√≠m jedn√© cesty
    // Toto zabr√°n√≠ tomu, aby balanceDistribution znovu p≈ôidalo smyƒçky pot√©, co je ensureSinglePath odstran√≠
    
    // 1. Nejprve vyv√°≈æit distribuci (pokud je po≈æadov√°no)
    if (config.balanceDist) {
      console.log('Vyva≈æuji distribuci...', config.distribution);
      try {
        balanceDistribution(currentMaze, config.distribution);
        const finalDist = analyzeDistribution(currentMaze);
        console.log('Fin√°ln√≠ distribuce:', finalDist);
      } catch (error) {
        console.warn('Vyva≈æov√°n√≠ distribuce selhalo:', error.message);
        // Pokraƒçovat p≈ôesto - toto je vylep≈°en√≠, ne kritick√° funkce
      }
    }

    // 2. Nakonec vynutit jednu cestu (pokud je po≈æadov√°no) 
    if (config.singlePath && LOOP_ALGOS.has(config.algorithm)) {
      console.log('Vynucuji jedinou cestu ≈ôe≈°en√≠...');
      try {
        ensureSinglePath(currentMaze);
        console.log('Vynucen√≠ jedn√© cesty dokonƒçeno');
      } catch (error) {
        console.warn('Vynucen√≠ jedn√© cesty selhalo:', error.message);
        // Pokraƒçovat p≈ôesto - bludi≈°tƒõ je st√°le platn√©
      }
    }

    // Fin√°ln√≠ validace
    if (!currentMaze.isValid()) {
      throw new Error('Bludi≈°tƒõ se stalo neplatn√Ωm po post-processingu.');
    }

    // Vykreslit fin√°ln√≠ bludi≈°tƒõ
    renderMaze(currentMaze, canvas);
    console.log('Bludi≈°tƒõ √∫spƒõ≈°nƒõ vykresleno');

  } catch (err) {
    console.error('Generov√°n√≠ bludi≈°tƒõ selhalo:', err);
    showError(err.message || 'P≈ôi generov√°n√≠ bludi≈°tƒõ do≈°lo k chybƒõ.');
    currentMaze = null;
    
    // Vymazat pl√°tno p≈ôi chybƒõ
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  } finally {
    setGenerating(false);
  }
}

function handleClear(e) {
  if (e) e.preventDefault?.();
  const ctx = canvas.getContext('2d');
  ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformace
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  currentMaze = null;
  console.log('Pl√°tno vymaz√°no');
}

// --- PWA Shortcut Handler ---
function handlePWAShortcuts() {
  const urlParams = new URLSearchParams(window.location.search);
  const action = urlParams.get('action');
  
  if (action === 'generate') {
    setTimeout(() => {
      handleGenerate();
    }, 500);
  } else if (action === 'pdf') {
    setTimeout(() => {
      handlePrintWorksheet();
    }, 500);
  }
  
  // Vyƒçistit URL parametry
  if (action) {
    const newUrl = window.location.pathname;
    window.history.replaceState({}, document.title, newUrl);
  }
}

// --- Offline Storage pro ulo≈æen√° bludi≈°tƒõ ---
const OFFLINE_STORAGE_KEY = 'saved_mazes';

function saveToOfflineStorage(maze, name) {
  try {
    const savedMazes = JSON.parse(localStorage.getItem(OFFLINE_STORAGE_KEY) || '[]');
    const mazeData = {
      id: Date.now(),
      name: name || `Bludi≈°tƒõ ${new Date().toLocaleString('cs-CZ')}`,
      data: maze.serialize ? maze.serialize() : maze,
      created: new Date().toISOString(),
      algorithm: algoSelect.value,
      dimensions: `${maze.width}√ó${maze.height}`
    };
    
    savedMazes.unshift(mazeData);
    
    // Zachovat pouze posledn√≠ch 10 bludi≈°≈•
    if (savedMazes.length > 10) {
      savedMazes.splice(10);
    }
    
    localStorage.setItem(OFFLINE_STORAGE_KEY, JSON.stringify(savedMazes));
    console.log('üíæ Bludi≈°tƒõ ulo≈æeno offline:', mazeData.name);
    return true;
  } catch (error) {
    console.error('‚ùå Offline ulo≈æen√≠ selhalo:', error);
    return false;
  }
}

function getOfflineStoredMazes() {
  try {
    return JSON.parse(localStorage.getItem(OFFLINE_STORAGE_KEY) || '[]');
  } catch (error) {
    console.error('‚ùå Naƒç√≠t√°n√≠ offline ulo≈æen√Ωch bludi≈°≈• selhalo:', error);
    return [];
  }
}

// --- Vylep≈°en√° funkce pro ulo≈æen√≠ ---
function handleSave(e) {
  if (e) e.preventDefault?.();
  if (!currentMaze) {
    showError('≈Ω√°dn√© bludi≈°tƒõ k ulo≈æen√≠! Nejprve vygenerujte bludi≈°tƒõ.');
    return;
  }
  try {
    // Offline backup
    saveToOfflineStorage(currentMaze);
    
    // Standardn√≠ JSON export
    saveMazeAsJSON(currentMaze);
    console.log('Bludi≈°tƒõ ulo≈æeno jako JSON + offline backup');
  } catch (error) {
    console.error('Ulo≈æen√≠ JSON selhalo:', error);
    showError('Ulo≈æen√≠ bludi≈°tƒõ jako JSON selhalo.');
  }
}

function handleSaveSVG(e) {
  if (e) e.preventDefault?.();
  if (!currentMaze) {
    showError('≈Ω√°dn√© bludi≈°tƒõ k exportu! Nejprve vygenerujte bludi≈°tƒõ.');
    return;
  }
  try {
    saveMazeAsSVG(currentMaze);
    console.log('Bludi≈°tƒõ exportov√°no jako SVG');
  } catch (error) {
    console.error('Export SVG selhal:', error);
    showError('Export bludi≈°tƒõ jako SVG selhal.');
  }
}

// Jednoduch√Ω BFS algoritmus pro ovƒõ≈ôen√≠ ≈ôe≈°itelnosti bludi≈°tƒõ
function isMazeSolvable(maze) {
  if (!maze || !maze.start || !maze.finish) {
    console.warn('Bludi≈°tƒõ nem√° nastaven start nebo c√≠l');
    return false;
  }

  const { start, finish, width, height } = maze;
  const visited = new Set();
  const queue = [start];
  
  // BFS pro nalezen√≠ cesty od startu k c√≠li
  while (queue.length > 0) {
    const current = queue.shift();
    const key = `${current.x},${current.y}`;
    
    if (visited.has(key)) continue;
    visited.add(key);
    
    // Na≈°li jsme c√≠l?
    if (current.x === finish.x && current.y === finish.y) {
      return true;
    }
    
    // Prozkoumat sousedn√≠ bu≈àky
    const cell = maze.getCell(current.x, current.y);
    if (!cell) continue;
    
    // Zkontrolovat v≈°echny smƒõry
    const directions = [
      { dx: 0, dy: -1, wall: 'N' }, // Sever
      { dx: 1, dy: 0, wall: 'E' },  // V√Ωchod
      { dx: 0, dy: 1, wall: 'S' },  // Jih
      { dx: -1, dy: 0, wall: 'W' }  // Z√°pad
    ];
    
    for (const dir of directions) {
      // Pokud nen√≠ stƒõna v tomto smƒõru, m≈Ø≈æeme proj√≠t
      if (!cell.hasWall(dir.wall)) {
        const nx = current.x + dir.dx;
        const ny = current.y + dir.dy;
        
        // Ovƒõ≈ôit, ≈æe jsme v mez√≠ch bludi≈°tƒõ
        if (nx >= 0 && nx < width && ny >= 0 && ny < height) {
          const neighborKey = `${nx},${ny}`;
          if (!visited.has(neighborKey)) {
            queue.push({ x: nx, y: ny });
          }
        }
      }
    }
  }
  
  return false; // Cesta nenalezena
}

async function handlePrintWorksheet(e) {
  if (e) e.preventDefault?.();
  
  try {
    setGenerating(true);
    printWorksheetBtn.textContent = 'Generuji PDF...';
    
    console.log('Generuji tiskov√Ω arch se 3 bludi≈°ti...');
    
    let easyMaze, mediumMaze, hardMaze;
    let attempts = 0;
    const maxAttempts = 10; // Bezpeƒçnostn√≠ limit
    
    // Generovat a ovƒõ≈ôovat bludi≈°tƒõ dokud nejsou v≈°echna ≈ôe≈°iteln√°
    do {
      attempts++;
      console.log(`Pokus ${attempts}: Generuji a ovƒõ≈ôuji bludi≈°tƒõ...`);
      
      // Generovat 3 PERFEKTN√ç bludi≈°tƒõ s r≈Øzn√Ωmi obt√≠≈ænostmi a velikostmi
      easyMaze = algorithms['sidewinder'](15, 15);           
      mediumMaze = algorithms['recursive-backtracker'](30, 30);  
      hardMaze = algorithms['recursive-backtracker'](50, 50);    
      
      // Ovƒõ≈ôit ≈ôe≈°itelnost ka≈æd√©ho bludi≈°tƒõ
      const easyValid = isMazeSolvable(easyMaze);
      const mediumValid = isMazeSolvable(mediumMaze);
      const hardValid = isMazeSolvable(hardMaze);
      
      console.log(`Ovƒõ≈ôen√≠ ≈ôe≈°itelnosti: Snadn√©=${easyValid}, St≈ôedn√≠=${mediumValid}, Tƒõ≈æk√©=${hardValid}`);
      
      if (easyValid && mediumValid && hardValid) {
        console.log('‚úÖ V≈°echna bludi≈°tƒõ jsou ≈ôe≈°iteln√°!');
        break;
      }
      
      if (attempts >= maxAttempts) {
        throw new Error(`Nepoda≈ôilo se vygenerovat ≈ôe≈°iteln√° bludi≈°tƒõ po ${maxAttempts} pokusech`);
      }
      
      console.warn(`‚ùå Nƒõkter√° bludi≈°tƒõ nejsou ≈ôe≈°iteln√°, pokus ${attempts}/${maxAttempts}`);
      
    } while (attempts < maxAttempts);
    
    // Vytvo≈ôit printovatelnou HTML str√°nku
    const printableHTML = createPrintableWorksheet(easyMaze, mediumMaze, hardMaze);
    
    // Otev≈ô√≠t v nov√©m oknƒõ pro tisk s ƒçist√Ωmi nastaven√≠mi
    const printWindow = window.open('', '_blank', 'width=800,height=600');
    printWindow.document.write(printableHTML);
    printWindow.document.close();
    
    // Automaticky spustit tisk s ƒçist√Ωmi nastaven√≠mi
    setTimeout(() => {
      // Nastavit browser na minim√°ln√≠ metadata
      printWindow.focus();
      printWindow.print();
      
      // Zav≈ô√≠t okno po tisku
      setTimeout(() => {
        printWindow.close();
      }, 1000);
    }, 500);
    
    console.log('Tiskov√Ω arch vygenerov√°n - pro nejƒçist≈°√≠ tisk vypnƒõte hlaviƒçky a patiƒçky v nastaven√≠ tisku');
    
  } catch (error) {
    console.error('Generov√°n√≠ tiskov√©ho archu selhalo:', error);
    showError('Generov√°n√≠ PDF selhalo: ' + error.message);
  } finally {
    setGenerating(false);
    printWorksheetBtn.textContent = 'üìÑ St√°hnout tiskov√Ω arch PDF';
  }
}

function createPrintableWorksheet(easyMaze, mediumMaze, hardMaze) {
  // Generovat SVG pro ka≈æd√© bludi≈°tƒõ s proporƒçn√≠mi velikostmi
  const easySVG = generateMazeSVG(easyMaze, 'SNADN√â (15√ó15)', 50);    // 50mm - mal√© a rychl√©
  const mediumSVG = generateMazeSVG(mediumMaze, 'ST≈òEDN√ç (30√ó30)', 70); // 70mm - st≈ôedn√≠ velikost
  const hardSVG = generateMazeSVG(hardMaze, 'Tƒö≈ΩK√â (50√ó50)', 100);      // 100mm - velk√© a detailn√≠
  
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Bludi≈°tƒõ - Tiskov√Ω arch</title>
  <style>
    @page {
      size: A4 portrait;
      margin: 8mm;
    }
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background: white;
      width: 194mm;
      height: 281mm;
      display: flex;
      flex-direction: column;
    }
    .title {
      text-align: center;
      font-size: 16px;
      font-weight: bold;
      margin: 2mm 0 3mm 0;
      color: #000;
      line-height: 1.2;
    }
    .mazes-grid {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;
      align-items: center;
      padding: 1mm 0;
    }
    .maze-container {
      text-align: center;
      margin: 1mm 0;
    }
    .maze-title {
      font-size: 11px;
      font-weight: bold;
      margin-bottom: 2mm;
      color: #333;
      line-height: 1;
    }
    .maze-svg {
      display: block;
      width: 100%;
      height: 100%;
    }
    .instructions {
      text-align: center;
      font-size: 8px;
      color: #666;
      margin-top: 2mm;
      padding: 1.5mm;
      border-top: 0.5px solid #ccc;
      line-height: 1.3;
    }
    @media print {
      body { 
        -webkit-print-color-adjust: exact;
        print-color-adjust: exact;
      }
      /* ODSTRANIT V≈†ECHNY BROWSER METADATA */
      @page {
        margin: 0;
        size: A4;
      }
      body {
        margin: 8mm;
        -webkit-print-color-adjust: exact;
      }
      /* Skr√Ωt v≈°e kromƒõ na≈°eho obsahu */
      * {
        visibility: hidden;
      }
      body, body * {
        visibility: visible;
      }
      /* Potlaƒçit hlaviƒçky a patiƒçky */
      .no-print {
        display: none !important;
      }
    }
  </style>
</head>
<body>
  <!-- INSTRUKCE PRO ƒåIST√ù TISK -->
  <div style="position: absolute; top: -1000px; left: -1000px; font-size: 1px; color: white;">
    Pro nejlep≈°√≠ v√Ωsledky: V dialogu tisku vypnƒõte "Hlaviƒçky a patiƒçky" / "Headers and footers"
  </div>
  
  <div class="title">BLUDI≈†Tƒö</div>
  
  <div class="mazes-grid">
    <div class="maze-container">
      <div class="maze-title">üü¢ ${easySVG.title}</div>
      <div style="width: ${easySVG.size}mm; height: ${easySVG.size}mm; margin: 0 auto; border: 1px solid #000;">
        ${easySVG.svg}
      </div>
    </div>
    
    <div class="maze-container">
      <div class="maze-title">üü° ${mediumSVG.title}</div>
      <div style="width: ${mediumSVG.size}mm; height: ${mediumSVG.size}mm; margin: 0 auto; border: 1px solid #000;">
        ${mediumSVG.svg}
      </div>
    </div>
    
    <div class="maze-container">
      <div class="maze-title">üî¥ ${hardSVG.title}</div>
      <div style="width: ${hardSVG.size}mm; height: ${hardSVG.size}mm; margin: 0 auto; border: 1px solid #000;">
        ${hardSVG.svg}
      </div>
    </div>
  </div>
  
  <div class="instructions">
    üü¢ S = START | üî¥ C = C√çL<br>
    Najdƒõte jedinou cestu od startu k c√≠li! Ka≈æd√© bludi≈°tƒõ m√° pouze jedno ≈ôe≈°en√≠.
  </div>
</body>
</html>`;
}

function generateMazeSVG(maze, title, physicalSize) {
  const size = physicalSize; // mm - different sizes based on complexity
  const margin = 1;
  const wallColor = "#000";
  const startColor = "#26a65b";
  const finishColor = "#e17055";
  
  const { width: cols, height: rows } = maze;
  const availableSize = size - (margin * 2);
  const cellSize = availableSize / Math.max(cols, rows);
  
  // Adjust wall width based on cell size for consistent appearance
  let wallWidth;
  if (cellSize >= 4) wallWidth = 0.8;      // Large cells - thick lines
  else if (cellSize >= 2) wallWidth = 0.5; // Medium cells - medium lines  
  else wallWidth = 0.4;                    // Small cells - thin lines
  
  const mazeWidth = cols * cellSize;
  const mazeHeight = rows * cellSize;
  const xOffset = margin + (availableSize - mazeWidth) / 2;
  const yOffset = margin + (availableSize - mazeHeight) / 2;
  
  let svg = `<svg class="maze-svg" width="${size}mm" height="${size}mm" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">`;
  svg += `<rect width="100%" height="100%" fill="white"/>`;
  
  // VYLEP≈†EN√â start a finish znaƒçky - adaptivn√≠ velikost
  if (maze.start) {
    const sx = xOffset + maze.start.x * cellSize;
    const sy = yOffset + maze.start.y * cellSize;
    // Cel√° bu≈àka vyplnƒõn√°
    svg += `<rect x="${sx}" y="${sy}" width="${cellSize}" height="${cellSize}" fill="${startColor}" fill-opacity="0.7"/>`;
    // B√≠l√© "S" pro START - adaptivn√≠ velikost p√≠sma
    const fontSize = Math.max(cellSize * 0.6, 1.2);
    svg += `<text x="${sx + cellSize/2}" y="${sy + cellSize/2 + fontSize/3}" text-anchor="middle" font-size="${fontSize}" font-weight="bold" fill="white">S</text>`;
  }
  
  if (maze.finish) {
    const fx = xOffset + maze.finish.x * cellSize;
    const fy = yOffset + maze.finish.y * cellSize;
    // Cel√° bu≈àka vyplnƒõn√°
    svg += `<rect x="${fx}" y="${fy}" width="${cellSize}" height="${cellSize}" fill="${finishColor}" fill-opacity="0.7"/>`;
    // B√≠l√© "C" pro C√çL - adaptivn√≠ velikost p√≠sma
    const fontSize = Math.max(cellSize * 0.6, 1.2);
    svg += `<text x="${fx + cellSize/2}" y="${fy + cellSize/2 + fontSize/3}" text-anchor="middle" font-size="${fontSize}" font-weight="bold" fill="white">C</text>`;
  }
  
  // Stƒõny - optimalizovan√© pro r≈Øzn√© velikosti
  svg += `<g stroke="${wallColor}" stroke-width="${wallWidth}" stroke-linecap="square" fill="none">`;
  
  for (let y = 0; y < rows; y++) {
    for (let x = 0; x < cols; x++) {
      const cell = maze.getCell(x, y);
      if (!cell) continue;
      
      const x1 = xOffset + x * cellSize;
      const y1 = yOffset + y * cellSize;
      const x2 = x1 + cellSize;
      const y2 = y1 + cellSize;
      
      // Nakreslit ka≈ædou stƒõnu pouze jednou
      if (cell.hasWall("N")) {
        svg += `<line x1="${x1.toFixed(2)}" y1="${y1.toFixed(2)}" x2="${x2.toFixed(2)}" y2="${y1.toFixed(2)}"/>`;
      }
      if (cell.hasWall("E")) {
        svg += `<line x1="${x2.toFixed(2)}" y1="${y1.toFixed(2)}" x2="${x2.toFixed(2)}" y2="${y2.toFixed(2)}"/>`;
      }
      if (cell.hasWall("S")) {
        svg += `<line x1="${x2.toFixed(2)}" y1="${y2.toFixed(2)}" x2="${x1.toFixed(2)}" y2="${y2.toFixed(2)}"/>`;
      }
      if (cell.hasWall("W")) {
        svg += `<line x1="${x1.toFixed(2)}" y1="${y2.toFixed(2)}" x2="${x1.toFixed(2)}" y2="${y1.toFixed(2)}"/>`;
      }
    }
  }
  
  svg += `</g></svg>`;
  
  return { svg, title, size };
}

// --- Event Listenery ---
generateBtn.addEventListener('click', handleGenerate);
clearBtn.addEventListener('click', handleClear);
saveBtn.addEventListener('click', handleSave);
saveSvgBtn.addEventListener('click', handleSaveSVG);
printWorksheetBtn.addEventListener('click', handlePrintWorksheet);
form.addEventListener('submit', handleGenerate);
algoSelect.addEventListener('change', updateAlgorithmOptions);

// P≈ôepnut√≠ panelu mo≈ænost√≠ distribuce
balanceChk.addEventListener('change', () => {
  balanceOpts.classList.toggle('active', balanceChk.checked);
});

// Aktualizace zobrazen√≠ pomƒõr≈Ø distribuce v re√°ln√©m ƒçase pro pomoc u≈æivateli udr≈æet souƒçet = 1.0
function updateRatioDisplay() {
  const dead = parseFloat(deadInput.value) || 0;
  const three = parseFloat(threeInput.value) || 0;
  const straight = parseFloat(straightInput.value) || 0;
  const sum = dead + three + straight;
  
  // Vizu√°ln√≠ zpƒõtn√° vazba pro souƒçet pomƒõr≈Ø (voliteln√© vylep≈°en√≠)
  if (Math.abs(sum - 1.0) > 0.05) {
    balanceOpts.style.backgroundColor = '#fff5f5'; // Svƒõtle ƒçerven√° n√°povƒõda
  } else {
    balanceOpts.style.backgroundColor = '#f8f8f8'; // Norm√°ln√≠
  }
}

deadInput.addEventListener('input', updateRatioDisplay);
threeInput.addEventListener('input', updateRatioDisplay);
straightInput.addEventListener('input', updateRatioDisplay);

// Responzivn√≠ zpracov√°n√≠ pl√°tna
window.addEventListener('resize', () => {
  clearTimeout(window._resizeTimeout);
  window._resizeTimeout = setTimeout(() => {
    setupCanvas();
    if (currentMaze) {
      try {
        renderMaze(currentMaze, canvas);
      } catch (error) {
        console.warn('P≈ôekreslen√≠ po zmƒõnƒõ velikosti selhalo:', error);
      }
    }
  }, 250);
});

// --- Inicializace ---
function initialize() {
  try {
    setupCanvas();
    updateAlgorithmOptions();
    updateRatioDisplay();
    
    // PWA Shortcuts handler
    handlePWAShortcuts();
    
    // Automaticky vygenerovat demo bludi≈°tƒõ po kr√°tk√© prodlevƒõ
    setTimeout(() => {
      if (!currentMaze) { // Pouze pokud je≈°tƒõ neexistuje ≈æ√°dn√© bludi≈°tƒõ
        handleGenerate();
      }
    }, 100);
    
    console.log('Gener√°tor bludi≈°≈• inicializov√°n (PWA re≈æim)');
    
    // Zobrazit poƒçet offline ulo≈æen√Ωch bludi≈°≈•
    const offlineMazes = getOfflineStoredMazes();
    if (offlineMazes.length > 0) {
      console.log(`üì± Nalezeno ${offlineMazes.length} offline ulo≈æen√Ωch bludi≈°≈•`);
    }
    
  } catch (error) {
    console.error('Inicializace selhala:', error);
    showError('Aplikace se nepoda≈ôilo spr√°vnƒõ inicializovat.');
  }
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initialize);
} else {
  initialize();
}

// --- Debug Helper + PWA Tools ---
window.__maze = () => currentMaze;
window.__debug = {
  regenerate: handleGenerate,
  clear: handleClear,
  analyze: () => currentMaze ? analyzeDistribution(currentMaze) : null,
  // PWA debug funkce
  offlineStorage: {
    list: getOfflineStoredMazes,
    clear: () => localStorage.removeItem(OFFLINE_STORAGE_KEY),
    save: (name) => currentMaze ? saveToOfflineStorage(currentMaze, name) : '≈Ω√°dn√© bludi≈°tƒõ k ulo≈æen√≠'
  },
  pwa: {
    isInstalled: () => window.matchMedia('(display-mode: standalone)').matches,
    isOnline: () => navigator.onLine,
    serviceWorker: () => navigator.serviceWorker.controller,
    cache: async () => {
      if ('caches' in window) {
        const names = await caches.keys();
        return names;
      }
      return 'Cache API nen√≠ podporov√°no';
    }
  }
};